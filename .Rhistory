system.time(for (i in 1:1000000) {
winnings[i] <- play_slots()
})
47.39 # seconds
# play_slots() is not vectorized. the score function is if tree. thus the simulation
# combines if and for, so we can probably vectorize it
# one solution is to get MANY  slot combinations at once, then use logical subsetting
# to operate on all of them simultaneously. all parametrized by "n" plays
get_many_slots_symbols <- function(n) {
# creates n x 3 matrix of symbols representing n different slot machine runs
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
vec <- sample(wheel, size = 3 * n, replace = TRUE,
prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52))
matrix(vec, ncol = 3)
}
play_many_slots <- function(n) {
symb_mat <- get_many_slots_symbols(n = n)
data.frame(w1 = symb_mat[,1], w2 = symb_mat[,2],
w3 = symb_mat[,3], prize = score_many_slots(symb_mat))
}
get_many_slots_symbols(5)
# Exercise 12.4/12.3 (Advanced challenge)
test_symbols <- matrix(
c("DD", "DD", "DD",
"C", "DD", "0",
"B", "B", "B",
"B", "BB", "BBB",
"C", "C", "0",
"7", "DD", "DD",
"DD", "C", "DD",
"DD","B","B"), nrow = 8, byrow = TRUE)
test_symbols
#
# score_many_slots <- function(symb_mat,diamonds_wild=FALSE){
#
#   # identify rows with diamonds
#   n <- length(symb_mat[,1])
#   # print(n)
#   # print(symb_mat %in% "DD")
#   print(symb_mat)
#   # temp <- matrix(symb_mat %in% "DD",nrow=n,byrow=FALSE)
#   # print(temp)
#   is_diamond_mtx <- matrix(symb_mat %in% "DD",nrow=n,byrow=FALSE)
#   # print(is_diamond_mtx)
#   num_DD_vec <- rowSums(is_diamond_mtx)
#   # print(num_DD_vec)
#
#   # a one time check that takes into account whether diamonds are wild or not
#   if (diamonds_wild){
#     symb_mat <-get_max_scoring_many_slots_symbols_from_wilds(symb_mat,num_DD_vec,is_diamond_mtx)
#   }
#
#   stop("THIS IS WHERE WE ARE CURRENTLY")
#   # <9> see exercise 11.6
#   # only do this if we want to account for diamonds being wild
#   # count diamonds <6> # we have to save this in advance if we are overwriting slot_symbols
#   num_diamonds <- count_diamonds(symb_mat)
#   if (diamonds_wild){
#     slot_symbols <- get_max_scoring_slots_symbols_from_wilds(slot_symbols)
#   }
#
#   if (check_three_of_kind(slot_symbols)){ # Case 1: all the same <1>
#     prize <- get_payout_three_of_kind(slot_symbols) # look up the prize <3>
#   } else if (check_all_bars(slot_symbols)){ # Case 2: all bars <2> ) {
#     prize <- 5 # assign $5 <4>
#   } else {
#     # count cherries <5>
#     num_cherries <- count_cherries(slot_symbols)
#     # calculate a prize <7>
#     prize <- get_payout_cherries(num_cherries)
#   }
#
#   # double the prize if necessary <8>
#   prize <- double_for_diamonds(prize,num_diamonds)
#
#   return(prize)
# }
#
# get_max_scoring_many_slots_symbols_from_wilds <- function(symb_mat,num_DD_vec,is_diamond_mtx){
#   symb_new <- symb_mat
#   # print(slot_symbols)
#   # (1/7) HANDLE rows with no-diamond scenarios
#   # if there are no diamonds, then there are no wilds and this
#   # is maximal scoring slot_symbols, do nothing to that row.
#
#   # (2/7) HANDLE rows with 2-diamond scenarios
#   # for example: c("DD","DD","BB") should return
#   # c("BB","BB,"BB") and not c("DD","DD","DD")
#   # (A) symb_mat[num_DD_vec == 2]: extracts rows with exactly two "DD"
#   # print(symb_mat[num_DD_vec == 2])
#   # (B) symb_mat[num_DD_vec == 2] != "DD": specifies which elements are NOT "DD" in selected rows
#   # print(symb_mat[num_DD_vec == 2] != "DD")
#   # (C) symb_mat[num_DD_vec == 2][(see B above)]: within those rows, select the element that is NOT "DD"
#   # print(symb_mat[num_DD_vec == 2][(symb_mat[num_DD_vec == 2] != "DD")])
#   # (D) symb_new[num_DD_vec == 2] <- (see C above): puts it all together, overwrite selected rows with found element within that row (recycling it thru respective row)
#   symb_new[num_DD_vec == 2] <- symb_mat[num_DD_vec == 2][(symb_mat[num_DD_vec == 2] != "DD")]
#   # print(symb_mat) # demonstrate (D) happened as planned
#   # stop("PAUSE HERE")
#
#   # (3/7 and 4/7) HANDLE 1-diamond or 3-diamond scenarios (rows with 3 diamonds get left alone)
#   # handle rows 1-6 (three of a kind) and 8-10 (two cherries) of Table 9.1
#   # threes of a kind are easiest to handle
#   # check if the other two are the same and then make slot_symbols all that same symbol
#   # this is equivalent to combinations from combinatorics
#
#   print("")
#   # (A) see if items in first column equal to items in second column
#   print(symb_mat[,1] == symb_mat[,2])
#   # (B) (see A above)[num_DD_vec == 1]: extract rows with exactly 1 "DD
#   print((symb_mat[,1] == symb_mat[,2])[num_DD_vec == 1])
#   # (C) symb_mat[num_DD_vec == 1][see B above]: for selected rows, get the non-"DD" elements
#   # print(symb_mat[num_DD_vec == 1][symb_mat[num_DD_vec == 1] != "DD"])
#   # (D) (see C above)[0] == (see C above)[1]: compare
#   # print(symb_mat[num_DD_vec == 1][symb_mat[num_DD_vec == 1] != "DD"][1] == symb_mat[num_DD_vec == 1][symb_mat[num_DD_vec == 1] != "DD"][2])
#
#
#   stop("PAUSE HERE")
#
#   if (slot_symbols[1] == slot_symbols[2]){
#     return(c(slot_symbols[1],slot_symbols[1],slot_symbols[1]))
#   } else if (slot_symbols[1] == slot_symbols[3]){
#     return(c(slot_symbols[1],slot_symbols[1],slot_symbols[1]))
#   } else if (slot_symbols[2] == slot_symbols[3]){
#     return(c(slot_symbols[2],slot_symbols[2],slot_symbols[2]))
#   }
#
#
#   # (5/7) HANDLE row 7 of Table 9.1, check if at least 2 bars present
#   if (sum(slot_symbols %in% c("B","BB","BBB")) == 2){
#     # we can only make it here if there is one diamond present and two different
#     # bars present. simply return any combination of bars that is NOT all the same
#     return(c("B","B","BB"))
#   }
#
#   # (6/7) HANDLE rows 12-13 of Table 9.1. 1 cherry
#   # there must be at least 1 diamond present to make it here.
#   # replace diamond with cherry if at least 1 other cherry present
#   if ((sum(slot_symbols %in% "C")) == 1){
#     # can return ANY combination with 2 cherries and some other symbol
#     return(c("C","C","B"))
#   }
#
#   # (7/7) HANDLE INEFFECTIVE DIAMOND scenarios
#   # this should only happen when there is "DD" but it cannot be used to increase
#   # a prize for example in c("BBB","7",DD"), the "DD" cannot be used to increase
#   # the prize since "BBB" and "7" are not in any prize winning combo together
#   # therefore simply return slot_symbols
#   # print(slot_symbols)
#   # print("slot_symbols must not be valid?")
#   return(slot_symbols)
# }
# symb_mat should be a matrix with a column for each slot machine window
score_many_slots <- function(symb_mat) {
# NOTE: diamonds are WILD in this function.
# Step 1: Assign base prize based on cherries and diamonds ---------
## Count the number of cherries and diamonds in each combination
cherries <- rowSums(symb_mat == "C")
diamonds <- rowSums(symb_mat == "DD")
## Wild diamonds count as cherries
prize <- c(0, 2, 5)[cherries + diamonds + 1]
## ...but not if there are zero real cherries
### (cherries is coerced to FALSE where cherries == 0)
prize[!cherries] <- 0
# Step 2: Change prize for combinations that contain three of a kind
same <- symb_mat[, 1] == symb_mat[, 2] &
symb_mat[, 2] == symb_mat[, 3]
payoffs <- c("DD" = 100, "7" = 80, "BBB" = 40,
"BB" = 25, "B" = 10, "C" = 10, "0" = 0)
prize[same] <- payoffs[symb_mat[same, 1]]
# Step 3: Change prize for combinations that contain all bars ------
bars <- symb_mat == "B" | symb_mat ==  "BB" | symb_mat == "BBB"
all_bars <- bars[, 1] & bars[, 2] & bars[, 3] & !same
prize[all_bars] <- 5
# Step 4: Handle wilds ---------------------------------------------
## combos with two diamonds
two_wilds <- diamonds == 2
### Identify the nonwild symbol
one <- two_wilds & symb_mat[, 1] != symb_mat[, 2] &
symb_mat[, 2] == symb_mat[, 3]
two <- two_wilds & symb_mat[, 1] != symb_mat[, 2] &
symb_mat[, 1] == symb_mat[, 3]
three <- two_wilds & symb_mat[, 1] == symb_mat[, 2] &
symb_mat[, 2] != symb_mat[, 3]
### Treat as three of a kind
prize[one] <- payoffs[symb_mat[one, 1]]
prize[two] <- payoffs[symb_mat[two, 2]]
prize[three] <- payoffs[symb_mat[three, 3]]
## combos with one wild
one_wild <- diamonds == 1
### Treat as all bars (if appropriate)
wild_bars <- one_wild & (rowSums(bars) == 2)
prize[wild_bars] <- 5
### Treat as three of a kind (if appropriate)
one <- one_wild & symb_mat[, 1] == symb_mat[, 2]
two <- one_wild & symb_mat[, 2] == symb_mat[, 3]
three <- one_wild & symb_mat[, 3] == symb_mat[, 1]
prize[one] <- payoffs[symb_mat[one, 1]]
prize[two] <- payoffs[symb_mat[two, 2]]
prize[three] <- payoffs[symb_mat[three, 3]]
# Step 5: Double prize for every diamond in combo ------------------
unname(prize * 2^diamonds)
}
score_many_slots(test_symbols)
# system.time(play_many_slots(10000000))
test_symbols
print(cherries)
# symb_mat should be a matrix with a column for each slot machine window
score_many_slots <- function(symb_mat) {
# NOTE: diamonds are WILD in this function.
# Step 1: Assign base prize based on cherries and diamonds ---------
## Count the number of cherries and diamonds in each combination
cherries <- rowSums(symb_mat == "C")
print(cherries)
diamonds <- rowSums(symb_mat == "DD")
## Wild diamonds count as cherries
prize <- c(0, 2, 5)[cherries + diamonds + 1]
## ...but not if there are zero real cherries
### (cherries is coerced to FALSE where cherries == 0)
prize[!cherries] <- 0
# Step 2: Change prize for combinations that contain three of a kind
same <- symb_mat[, 1] == symb_mat[, 2] &
symb_mat[, 2] == symb_mat[, 3]
payoffs <- c("DD" = 100, "7" = 80, "BBB" = 40,
"BB" = 25, "B" = 10, "C" = 10, "0" = 0)
prize[same] <- payoffs[symb_mat[same, 1]]
# Step 3: Change prize for combinations that contain all bars ------
bars <- symb_mat == "B" | symb_mat ==  "BB" | symb_mat == "BBB"
all_bars <- bars[, 1] & bars[, 2] & bars[, 3] & !same
prize[all_bars] <- 5
# Step 4: Handle wilds ---------------------------------------------
## combos with two diamonds
two_wilds <- diamonds == 2
### Identify the nonwild symbol
one <- two_wilds & symb_mat[, 1] != symb_mat[, 2] &
symb_mat[, 2] == symb_mat[, 3]
two <- two_wilds & symb_mat[, 1] != symb_mat[, 2] &
symb_mat[, 1] == symb_mat[, 3]
three <- two_wilds & symb_mat[, 1] == symb_mat[, 2] &
symb_mat[, 2] != symb_mat[, 3]
### Treat as three of a kind
prize[one] <- payoffs[symb_mat[one, 1]]
prize[two] <- payoffs[symb_mat[two, 2]]
prize[three] <- payoffs[symb_mat[three, 3]]
## combos with one wild
one_wild <- diamonds == 1
### Treat as all bars (if appropriate)
wild_bars <- one_wild & (rowSums(bars) == 2)
prize[wild_bars] <- 5
### Treat as three of a kind (if appropriate)
one <- one_wild & symb_mat[, 1] == symb_mat[, 2]
two <- one_wild & symb_mat[, 2] == symb_mat[, 3]
three <- one_wild & symb_mat[, 3] == symb_mat[, 1]
prize[one] <- payoffs[symb_mat[one, 1]]
prize[two] <- payoffs[symb_mat[two, 2]]
prize[three] <- payoffs[symb_mat[three, 3]]
# Step 5: Double prize for every diamond in combo ------------------
unname(prize * 2^diamonds)
}
score_many_slots(test_symbols)
# system.time(play_many_slots(10000000))
test_symbols
test_symbols <- matrix(
c("DD", "DD", "DD",
"C", "DD", "0",
"B", "B", "B",
"B", "BB", "BBB",
"C", "C", "0",
"7", "DD", "DD",
"DD", "C", "DD",
"DD","B","B",
"C","C","C"), nrow = 9, byrow = TRUE)
test_symbols
score_many_slots(test_symbols)
# symb_mat should be a matrix with a column for each slot machine window
score_many_slots <- function(symb_mat) {
# NOTE: diamonds are WILD in this function.
# Step 1: Assign base prize based on cherries and diamonds ---------
## Count the number of cherries and diamonds in each combination
cherries <- rowSums(symb_mat == "C")
print(symb_mat == "C",cherries)
diamonds <- rowSums(symb_mat == "DD")
## Wild diamonds count as cherries
prize <- c(0, 2, 5)[cherries + diamonds + 1]
## ...but not if there are zero real cherries
### (cherries is coerced to FALSE where cherries == 0)
prize[!cherries] <- 0
# Step 2: Change prize for combinations that contain three of a kind
same <- symb_mat[, 1] == symb_mat[, 2] &
symb_mat[, 2] == symb_mat[, 3]
payoffs <- c("DD" = 100, "7" = 80, "BBB" = 40,
"BB" = 25, "B" = 10, "C" = 10, "0" = 0)
prize[same] <- payoffs[symb_mat[same, 1]]
# Step 3: Change prize for combinations that contain all bars ------
bars <- symb_mat == "B" | symb_mat ==  "BB" | symb_mat == "BBB"
all_bars <- bars[, 1] & bars[, 2] & bars[, 3] & !same
prize[all_bars] <- 5
# Step 4: Handle wilds ---------------------------------------------
## combos with two diamonds
two_wilds <- diamonds == 2
### Identify the nonwild symbol
one <- two_wilds & symb_mat[, 1] != symb_mat[, 2] &
symb_mat[, 2] == symb_mat[, 3]
two <- two_wilds & symb_mat[, 1] != symb_mat[, 2] &
symb_mat[, 1] == symb_mat[, 3]
three <- two_wilds & symb_mat[, 1] == symb_mat[, 2] &
symb_mat[, 2] != symb_mat[, 3]
### Treat as three of a kind
prize[one] <- payoffs[symb_mat[one, 1]]
prize[two] <- payoffs[symb_mat[two, 2]]
prize[three] <- payoffs[symb_mat[three, 3]]
## combos with one wild
one_wild <- diamonds == 1
### Treat as all bars (if appropriate)
wild_bars <- one_wild & (rowSums(bars) == 2)
prize[wild_bars] <- 5
### Treat as three of a kind (if appropriate)
one <- one_wild & symb_mat[, 1] == symb_mat[, 2]
two <- one_wild & symb_mat[, 2] == symb_mat[, 3]
three <- one_wild & symb_mat[, 3] == symb_mat[, 1]
prize[one] <- payoffs[symb_mat[one, 1]]
prize[two] <- payoffs[symb_mat[two, 2]]
prize[three] <- payoffs[symb_mat[three, 3]]
# Step 5: Double prize for every diamond in combo ------------------
unname(prize * 2^diamonds)
}
score_many_slots(test_symbols)
# symb_mat should be a matrix with a column for each slot machine window
score_many_slots <- function(symb_mat) {
# NOTE: diamonds are WILD in this function.
# Step 1: Assign base prize based on cherries and diamonds ---------
## Count the number of cherries and diamonds in each combination
cherries <- rowSums(symb_mat == "C")
print(symb_mat == "C")
print(cherries)
diamonds <- rowSums(symb_mat == "DD")
## Wild diamonds count as cherries
prize <- c(0, 2, 5)[cherries + diamonds + 1]
## ...but not if there are zero real cherries
### (cherries is coerced to FALSE where cherries == 0)
prize[!cherries] <- 0
# Step 2: Change prize for combinations that contain three of a kind
same <- symb_mat[, 1] == symb_mat[, 2] &
symb_mat[, 2] == symb_mat[, 3]
payoffs <- c("DD" = 100, "7" = 80, "BBB" = 40,
"BB" = 25, "B" = 10, "C" = 10, "0" = 0)
prize[same] <- payoffs[symb_mat[same, 1]]
# Step 3: Change prize for combinations that contain all bars ------
bars <- symb_mat == "B" | symb_mat ==  "BB" | symb_mat == "BBB"
all_bars <- bars[, 1] & bars[, 2] & bars[, 3] & !same
prize[all_bars] <- 5
# Step 4: Handle wilds ---------------------------------------------
## combos with two diamonds
two_wilds <- diamonds == 2
### Identify the nonwild symbol
one <- two_wilds & symb_mat[, 1] != symb_mat[, 2] &
symb_mat[, 2] == symb_mat[, 3]
two <- two_wilds & symb_mat[, 1] != symb_mat[, 2] &
symb_mat[, 1] == symb_mat[, 3]
three <- two_wilds & symb_mat[, 1] == symb_mat[, 2] &
symb_mat[, 2] != symb_mat[, 3]
### Treat as three of a kind
prize[one] <- payoffs[symb_mat[one, 1]]
prize[two] <- payoffs[symb_mat[two, 2]]
prize[three] <- payoffs[symb_mat[three, 3]]
## combos with one wild
one_wild <- diamonds == 1
### Treat as all bars (if appropriate)
wild_bars <- one_wild & (rowSums(bars) == 2)
prize[wild_bars] <- 5
### Treat as three of a kind (if appropriate)
one <- one_wild & symb_mat[, 1] == symb_mat[, 2]
two <- one_wild & symb_mat[, 2] == symb_mat[, 3]
three <- one_wild & symb_mat[, 3] == symb_mat[, 1]
prize[one] <- payoffs[symb_mat[one, 1]]
prize[two] <- payoffs[symb_mat[two, 2]]
prize[three] <- payoffs[symb_mat[three, 3]]
# Step 5: Double prize for every diamond in combo ------------------
unname(prize * 2^diamonds)
}
score_many_slots(test_symbols)
# system.time(play_many_slots(10000000))
test_symbols <- matrix(
c("DD", "DD", "DD",
"C", "DD", "0",
"B", "B", "B",
"B", "BB", "BBB",
"C", "C", "0",
"7", "DD", "DD",
"DD", "C", "DD",
"DD","B","B",
"C","C","C"), nrow = 9, byrow = TRUE)
test_symbols
View(test_symbols)
# symb_mat should be a matrix with a column for each slot machine window
score_many_slots <- function(symb_mat) {
# NOTE: diamonds are WILD in this function.
# Step 1: Assign base prize based on cherries and diamonds ---------
## Count the number of cherries and diamonds in each combination
cherries <- rowSums(symb_mat == "C")
diamonds <- rowSums(symb_mat == "DD")
## Wild diamonds count as cherries
print(diamonds)
prize <- c(0, 2, 5)[cherries + diamonds + 1]
## ...but not if there are zero real cherries
### (cherries is coerced to FALSE where cherries == 0)
prize[!cherries] <- 0
# Step 2: Change prize for combinations that contain three of a kind
same <- symb_mat[, 1] == symb_mat[, 2] &
symb_mat[, 2] == symb_mat[, 3]
payoffs <- c("DD" = 100, "7" = 80, "BBB" = 40,
"BB" = 25, "B" = 10, "C" = 10, "0" = 0)
prize[same] <- payoffs[symb_mat[same, 1]]
# Step 3: Change prize for combinations that contain all bars ------
bars <- symb_mat == "B" | symb_mat ==  "BB" | symb_mat == "BBB"
all_bars <- bars[, 1] & bars[, 2] & bars[, 3] & !same
prize[all_bars] <- 5
# Step 4: Handle wilds ---------------------------------------------
## combos with two diamonds
two_wilds <- diamonds == 2
### Identify the nonwild symbol
one <- two_wilds & symb_mat[, 1] != symb_mat[, 2] &
symb_mat[, 2] == symb_mat[, 3]
two <- two_wilds & symb_mat[, 1] != symb_mat[, 2] &
symb_mat[, 1] == symb_mat[, 3]
three <- two_wilds & symb_mat[, 1] == symb_mat[, 2] &
symb_mat[, 2] != symb_mat[, 3]
### Treat as three of a kind
prize[one] <- payoffs[symb_mat[one, 1]]
prize[two] <- payoffs[symb_mat[two, 2]]
prize[three] <- payoffs[symb_mat[three, 3]]
## combos with one wild
one_wild <- diamonds == 1
### Treat as all bars (if appropriate)
wild_bars <- one_wild & (rowSums(bars) == 2)
prize[wild_bars] <- 5
### Treat as three of a kind (if appropriate)
one <- one_wild & symb_mat[, 1] == symb_mat[, 2]
two <- one_wild & symb_mat[, 2] == symb_mat[, 3]
three <- one_wild & symb_mat[, 3] == symb_mat[, 1]
prize[one] <- payoffs[symb_mat[one, 1]]
prize[two] <- payoffs[symb_mat[two, 2]]
prize[three] <- payoffs[symb_mat[three, 3]]
# Step 5: Double prize for every diamond in combo ------------------
unname(prize * 2^diamonds)
}
score_many_slots(test_symbols)
# system.time(play_many_slots(10000000))
View(test_symbols)
# symb_mat should be a matrix with a column for each slot machine window
score_many_slots <- function(symb_mat) {
# NOTE: diamonds are WILD in this function.
# Step 1: Assign base prize based on cherries and diamonds ---------
## Count the number of cherries and diamonds in each combination
cherries <- rowSums(symb_mat == "C")
diamonds <- rowSums(symb_mat == "DD")
## Wild diamonds count as cherries
print(cherries)
print(diamonds)
print(diamonds + cherries + 1)
prize <- c(0, 2, 5)[cherries + diamonds + 1]
## ...but not if there are zero real cherries
### (cherries is coerced to FALSE where cherries == 0)
prize[!cherries] <- 0
# Step 2: Change prize for combinations that contain three of a kind
same <- symb_mat[, 1] == symb_mat[, 2] &
symb_mat[, 2] == symb_mat[, 3]
payoffs <- c("DD" = 100, "7" = 80, "BBB" = 40,
"BB" = 25, "B" = 10, "C" = 10, "0" = 0)
prize[same] <- payoffs[symb_mat[same, 1]]
# Step 3: Change prize for combinations that contain all bars ------
bars <- symb_mat == "B" | symb_mat ==  "BB" | symb_mat == "BBB"
all_bars <- bars[, 1] & bars[, 2] & bars[, 3] & !same
prize[all_bars] <- 5
# Step 4: Handle wilds ---------------------------------------------
## combos with two diamonds
two_wilds <- diamonds == 2
### Identify the nonwild symbol
one <- two_wilds & symb_mat[, 1] != symb_mat[, 2] &
symb_mat[, 2] == symb_mat[, 3]
two <- two_wilds & symb_mat[, 1] != symb_mat[, 2] &
symb_mat[, 1] == symb_mat[, 3]
three <- two_wilds & symb_mat[, 1] == symb_mat[, 2] &
symb_mat[, 2] != symb_mat[, 3]
### Treat as three of a kind
prize[one] <- payoffs[symb_mat[one, 1]]
prize[two] <- payoffs[symb_mat[two, 2]]
prize[three] <- payoffs[symb_mat[three, 3]]
## combos with one wild
one_wild <- diamonds == 1
### Treat as all bars (if appropriate)
wild_bars <- one_wild & (rowSums(bars) == 2)
prize[wild_bars] <- 5
### Treat as three of a kind (if appropriate)
one <- one_wild & symb_mat[, 1] == symb_mat[, 2]
two <- one_wild & symb_mat[, 2] == symb_mat[, 3]
three <- one_wild & symb_mat[, 3] == symb_mat[, 1]
prize[one] <- payoffs[symb_mat[one, 1]]
prize[two] <- payoffs[symb_mat[two, 2]]
prize[three] <- payoffs[symb_mat[three, 3]]
# Step 5: Double prize for every diamond in combo ------------------
unname(prize * 2^diamonds)
}
score_many_slots(test_symbols)
# system.time(play_many_slots(10000000))
c(0,2,5)[4, 5, 1, 1]
c(0,2,5)[4, 5, 1]
c(0,2,5)[4, 3, 1]
c(0,2,5)[c(4,3,1,)]
c(0,2,5)[c(4,3,1)]
install.packages("tinytex")
tinytex::install_tinytex()
R.version
